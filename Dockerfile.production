# Production Dockerfile for SoundBridge
# Multi-stage build for optimized production image

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements.txt

# Production stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    ENVIRONMENT=production

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    opus-tools \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create non-root user for security
RUN groupadd -r soundbridge && useradd -r -g soundbridge soundbridge

# Create application directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/temp && \
    chown -R soundbridge:soundbridge /app

# Copy application code
COPY --chown=soundbridge:soundbridge . .

# Create production config
RUN echo "# Production configuration" > .env && \
    echo "ENVIRONMENT=production" >> .env && \
    echo "LOG_LEVEL=INFO" >> .env && \
    echo "SL_BRIDGE_ENABLED=true" >> .env && \
    echo "SL_BRIDGE_HOST=0.0.0.0" >> .env && \
    echo "SL_BRIDGE_PORT=8080" >> .env

# Switch to non-root user
USER soundbridge

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/api/v1/status/health', timeout=5)" || exit 1

# Expose ports
EXPOSE 8080

# Set default command
CMD ["python", "bot.py"]
